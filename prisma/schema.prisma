// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User{
//   id Int @id @default(autoincrement())
//   email String @unique
//   firstName String?
//   lastName String?
//   password String
//   files File[]
//   folders Folder[]
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   sharedFile File[] @relation("SharedFiles")
//   sharedFiles SharedFile[]
// }

// model File{
//   id Int @id @default(autoincrement())
//   name String
//   size BigInt //in bytes
//   mineType String 
//   url String // file storage url in supabase
//   folder Folder? @relation(fields: [folderId], references: [id])
//   folderId Int?
//   owner User @relation(fields: [ownerId], references: [id])
//   ownerId Int
//   sharedWith User[] @relation("SharedFiles")
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   sharedFile SharedFile[]
// }

// model Folder{
//   id Int @id @default(autoincrement())
//   name String
//   owner User @relation(fields: [ownerId], references: [id])
//   ownerId Int 
//   files File[]  //one can have many files
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model SharedFile{
//   id Int @id @default(autoincrement())
//   file File @relation(fields: [fileId], references: [id])
//   fileId Int
//   user User @relation(fields: [userId], references: [id])
//   userId Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }


model User {
  id                Int           @id @default(autoincrement())
  email             String        @unique
  firstName         String?
  lastName          String?
  password          String
  files             File[]        @relation("OwnedFiles")
  folders           Folder[]      @relation("OwnedFolders")
  sharedFiles       SharedFile[]  @relation("UserSharedFiles")
  sharedFolders     SharedFolder[] @relation("UserSharedFolders")
}

model File {
  id          Int           @id @default(autoincrement())
  name        String
  size        BigInt        // in bytes
  mimeType    String        
  url         String        // file storage url in supabase
  folder      Folder?       @relation(fields: [folderId], references: [id])
  folderId    Int?          
  owner       User          @relation("OwnedFiles", fields: [ownerId], references: [id])
  ownerId     Int
  sharedWith  SharedFile[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Folder {
  id          Int           @id @default(autoincrement())
  name        String
  owner       User          @relation("OwnedFolders", fields: [ownerId], references: [id])
  ownerId     Int
  files       File[]
  sharedWith  SharedFolder[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model SharedFile {
  id          Int           @id @default(autoincrement())
  file        File          @relation(fields: [fileId], references: [id])
  fileId      Int
  user        User          @relation("UserSharedFiles", fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@unique([fileId, userId])
}

model SharedFolder {
  id          Int           @id @default(autoincrement())
  folder      Folder        @relation(fields: [folderId], references: [id])
  folderId    Int
  user        User          @relation("UserSharedFolders", fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@unique([folderId, userId])
}